{"version":3,"sources":["../src/utils.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;uEAwBO,iBAAwC,IAAxC;AAAA,QAEC,GAFD,EAGC,EAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEa,iBAAO,gBAAP,CAAwB,KAAK,IAAL,CAAU,OAAO,CAAjB,CAAxB,CAFb;;AAAA;AAEC,eAFD;AAGC,cAHD,GAGM,qBAAW,IAAI,QAAJ,CAAa,KAAb,CAAX,EAAgC,EAAhC,CAHN;;;;AAAA,6CAME,WAAW,EAAX,EAAe,IAAf,EAAqB,MAArB,CAA4B,OAAO,CAAnC,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;kBAAe,wB;;;;;;;;;;;;;;uEAef,kBAAoC,GAApC,EAAyC,GAAzC;AAAA,QACC,KADD,EAGD,EAHC,EAMG,GANH;AAAA;AAAA;AAAA;AAAA;AACC,iBADD,GACS,IAAI,QAAJ,CAAa,GAAb,EAAkB,QAAlB,CAA2B,iBAAO,GAAlC,CADT;AAGD,cAHC;;AAAA;AAAA;AAAA,mBAMe,iBAAO,gBAAP,CAAwB,KAAK,IAAL,CAAU,MAAM,SAAN,KAAoB,CAA9B,CAAxB,CANf;;AAAA;AAMG,eANH;;;;AASH,iBAAK,qBAAW,IAAI,QAAJ,CAAa,KAAb,CAAX,EAAgC,EAAhC,EAAoC,GAApC,CAAwC,GAAxC,CAAL;;AATG;AAAA,gBAUI,GAAG,SAAH,CAAa,GAAb,KAAqB,CAVzB;AAAA;AAAA;AAAA;;AAAA;AAAA,8CAaE,EAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;kBAAe,oB;;;;;;;;;;;;;uEAqBf,kBAAgC,IAAhC;AAAA,QAED,EAFC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEW,yBAAyB,IAAzB,CAFX;;AAAA;AAAA,2BAE8C,iBAAO,GAFrD;AAED,cAFC,kBAE2C,EAF3C;;;AAIL,mBAAO,CAAC,GAAG,eAAH,EAAR,EAA8B;AAC5B,mBAAK,GAAG,GAAH,CAAO,OAAP,CAAL;AACD;;;AANI,8CASE,WAAW,EAAX,EAAe,IAAf,EAAqB,MAArB,CAA4B,OAAO,CAAnC,CATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;kBAAe,gB;;;;;;;;;;;;QAiBN,W,GAAA,W;;AA7EhB;;;;AACA;;;;AACA;;;;AAEA,mBAAQ,YAAR;;AAEO,IAAM,4BAAU,qBAAW,GAAX,CAAhB;;;;;;;;AAQP,SAAS,UAAT,CAAoB,EAApB,EAAwB,IAAxB,EAA8B;AAC5B,MAAM,aAAa,GAAG,SAAH,KAAiB,IAApC;AACA,SAAO,aAAa,CAAb,GAAiB,GAAG,UAAH,CAAc,UAAd,CAAjB,GAA6C,EAApD;AACD,CA4DM,SAAS,WAAT,CAAqB,GAArB,EAA0B;AAC/B,MAAI,QAAQ,SAAZ,EAAuB,OAAO,IAAP;;AAEvB,SAAO,eAAe,MAAf,GAAwB,GAAxB,GAA8B,0BAAc,GAAd,CAArC;AACD","file":"utils.js","sourcesContent":["import Promise from 'bluebird';\nimport crypto from 'crypto';\nimport { BigInteger as BigInt } from 'jsbn';\n\nPromise.promisifyAll(crypto);\n\nexport const BIG_TWO = new BigInt('2');\n\n/**\n * Trims a BigInt to a specific length.\n * @param {BigInt} bi BigInt to be trimmed.\n * @param {number} bits Number of bits in the output.\n * @returns {BigInt}\n */\nfunction trimBigInt(bi, bits) {\n  const trimLength = bi.bitLength() - bits;\n  return trimLength > 0 ? bi.shiftRight(trimLength) : bi;\n}\n\n/**\n * Returns a random BigInt with the given amount of bits.\n * @param {number} bits Number of bits in the output.\n * @returns {BigInt}\n */\nexport async function getRandomNbitBigIntAsync(bits) {\n  // Generate random bytes with the length of the range\n  const buf = await crypto.randomBytesAsync(Math.ceil(bits / 8));\n  const bi = new BigInt(buf.toString('hex'), 16);\n\n  // Trim the result and then ensure that the highest bit is set\n  return trimBigInt(bi, bits).setBit(bits - 1);\n}\n\n/**\n * Returns a random BigInt in the given range.\n * @param {BigInt} min Minimum value (included).\n * @param {BigInt} max Maximum value (excluded).\n * @returns {BigInt}\n */\nexport async function getRandomBigIntAsync(min, max) {\n  const range = max.subtract(min).subtract(BigInt.ONE);\n\n  let bi;\n  do {\n    // Generate random bytes with the length of the range\n    const buf = await crypto.randomBytesAsync(Math.ceil(range.bitLength() / 8));\n\n    // Offset the result by the minimum value\n    bi = new BigInt(buf.toString('hex'), 16).add(min);\n  } while (bi.compareTo(max) >= 0);\n\n  // Return the result which satisfies the given range\n  return bi;\n}\n\n/**\n * Returns a random prime BigInt value.\n * @param {number} bits Number of bits in the output.\n * @returns {BigInt}\n */\nexport async function getBigPrimeAsync(bits) {\n  // Generate a random odd number with the given length\n  let bi = (await getRandomNbitBigIntAsync(bits)).or(BigInt.ONE);\n\n  while (!bi.isProbablePrime()) {\n    bi = bi.add(BIG_TWO);\n  }\n\n  // Trim the result and then ensure that the highest bit is set\n  return trimBigInt(bi, bits).setBit(bits - 1);\n}\n\n/**\n * Parses a BigInt.\n * @param {BigInt|string|number} obj Object to be parsed.\n * @returns {?BigInt}\n */\nexport function parseBigInt(obj) {\n  if (obj === undefined) return null;\n\n  return obj instanceof Object ? obj : new BigInt(`${obj}`);\n}\n"]}