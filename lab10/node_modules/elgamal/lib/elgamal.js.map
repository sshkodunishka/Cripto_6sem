{"version":3,"sources":["../src/elgamal.js"],"names":[],"mappings":"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","file":"elgamal.js","sourcesContent":["import { BigInteger as BigInt } from 'jsbn';\nimport DecryptedValue from './models/decrypted-value';\nimport EncryptedValue from './models/encrypted-value';\nimport * as Errors from './errors';\nimport * as Utils from './utils';\n\n/**\n * Provides methods for the ElGamal cryptosystem.\n */\nexport default class ElGamal {\n  /**\n   * Safe prime number.\n   * @type {BigInt}\n   * @memberof ElGamal\n   */\n  p;\n\n  /**\n   * Generator.\n   * @type {BigInt}\n   * @memberof ElGamal\n   */\n  g;\n\n  /**\n   * Public key.\n   * @type {BigInt}\n   * @memberof ElGamal\n   */\n  y;\n\n  /**\n   * Private key.\n   * @type {BigInt}\n   * @memberof ElGamal\n   */\n  x;\n\n  static async generateAsync(primeBits = 2048) {\n    let q;\n    let p;\n    do {\n      q = await Utils.getBigPrimeAsync(primeBits - 1);\n      p = q.shiftLeft(1).add(BigInt.ONE);\n    } while (!p.isProbablePrime()); // Ensure that p is a prime\n\n    let g;\n    do {\n      // Avoid g=2 because of Bleichenbacher's attack\n      g = await Utils.getRandomBigIntAsync(new BigInt('3'), p);\n    } while (\n      g.modPowInt(2, p).equals(BigInt.ONE) ||\n      g.modPow(q, p).equals(BigInt.ONE) ||\n      // g|p-1\n      p.subtract(BigInt.ONE).remainder(g).equals(BigInt.ZERO) ||\n      // g^(-1)|p-1 (evades Khadir's attack)\n      p.subtract(BigInt.ONE).remainder(g.modInverse(p)).equals(BigInt.ZERO)\n    );\n\n    // Generate private key\n    const x = await Utils.getRandomBigIntAsync(\n      Utils.BIG_TWO,\n      p.subtract(BigInt.ONE)\n    );\n\n    // Generate public key\n    const y = g.modPow(x, p);\n\n    return new ElGamal(p, g, y, x);\n  }\n\n  /**\n   * Creates a new ElGamal instance.\n   * @param {BigInt|string|number} p Safe prime number.\n   * @param {BigInt|string|number} g Generator.\n   * @param {BigInt|string|number} y Public key.\n   * @param {BigInt|string|number} x Private key.\n   */\n  constructor(p, g, y, x) {\n    this.p = Utils.parseBigInt(p);\n    this.g = Utils.parseBigInt(g);\n    this.y = Utils.parseBigInt(y);\n    this.x = Utils.parseBigInt(x);\n  }\n\n  /**\n   * Encrypts a message.\n   * @param {string|BigInt|number} m Piece of data to be encrypted, which must\n   * be numerically smaller than `p`.\n   * @param {BigInt|string|number} [k] A secret number, chosen randomly in the\n   * closed range `[1, p-2]`.\n   * @returns {EncryptedValue}\n   */\n  async encryptAsync(m, k) {\n    const tmpKey = Utils.parseBigInt(k) || await Utils.getRandomBigIntAsync(\n      BigInt.ONE,\n      this.p.subtract(BigInt.ONE)\n    );\n    const mBi = new DecryptedValue(m).bi;\n    const p = this.p;\n\n    const a = this.g.modPow(tmpKey, p);\n    const b = this.y.modPow(tmpKey, p).multiply(mBi).remainder(p);\n\n    return new EncryptedValue(a, b);\n  }\n\n  /**\n   * Decrypts a message.\n   * @param {EncryptedValue} m Piece of data to be decrypted.\n   * @throws {MissingPrivateKeyError}\n   * @returns {DecryptedValue}\n   */\n  async decryptAsync(m) {\n    // TODO: Use a custom error object\n    if (!this.x) throw new Errors.MissingPrivateKeyError();\n\n    const p = this.p;\n    const r = await Utils.getRandomBigIntAsync(\n      Utils.BIG_TWO,\n      this.p.subtract(BigInt.ONE)\n    );\n\n    const aBlind = this.g.modPow(r, p).multiply(m.a).remainder(p);\n    const ax = aBlind.modPow(this.x, p);\n\n    const plaintextBlind = ax.modInverse(p).multiply(m.b).remainder(p);\n    const plaintext = this.y.modPow(r, p).multiply(plaintextBlind).remainder(p);\n\n    return new DecryptedValue(plaintext);\n  }\n}\n"]}