{"version":3,"sources":["../../src/models/encrypted-value.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;IAGqB,c;;;;;;AAanB,0BAAY,CAAZ,EAAe,CAAf,EAAkB;AAAA;;AAChB,SAAK,CAAL,GAAS,CAAT;AACA,SAAK,CAAL,GAAS,CAAT;AACD;;;;;;;;;;;;;;;;;;6BAQQ,c,EAAgB;AACvB,aAAO,IAAI,cAAJ,CACL,KAAK,CAAL,CAAO,QAAP,CAAgB,eAAe,CAA/B,CADK,EAEL,KAAK,CAAL,CAAO,QAAP,CAAgB,eAAe,CAA/B,CAFK,CAAP;AAID;;;;;kBA7BkB,c","file":"encrypted-value.js","sourcesContent":["/**\n * Stores an ElGamal-encrypted value.\n */\nexport default class EncryptedValue {\n  /**\n   * @type BigInt\n   * @memberof EncryptedValue\n   */\n  a;\n\n  /**\n   * @type BigInt\n   * @memberof EncryptedValue\n   */\n  b;\n\n  constructor(a, b) {\n    this.a = a;\n    this.b = b;\n  }\n\n  /**\n   * Performs homomorphic multiplication of the current and the given value.\n   * @param {EncryptedValue} encryptedValue Value to multiply the current value\n   * with.\n   * @returns {EncryptedValue}\n   */\n  multiply(encryptedValue) {\n    return new EncryptedValue(\n      this.a.multiply(encryptedValue.a),\n      this.b.multiply(encryptedValue.b)\n    );\n  }\n}\n"]}